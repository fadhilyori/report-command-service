// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorServiceClient interface {
	StreamData(ctx context.Context, opts ...grpc.CallOption) (SensorService_StreamDataClient, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (SensorService_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorService_serviceDesc.Streams[0], "/pb.SensorService/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceStreamDataClient{stream}
	return x, nil
}

type SensorService_StreamDataClient interface {
	Send(*SensorEvent) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type sensorServiceStreamDataClient struct {
	grpc.ClientStream
}

func (x *sensorServiceStreamDataClient) Send(m *SensorEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sensorServiceStreamDataClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
// All implementations must embed UnimplementedSensorServiceServer
// for forward compatibility
type SensorServiceServer interface {
	StreamData(SensorService_StreamDataServer) error
	mustEmbedUnimplementedSensorServiceServer()
}

// UnimplementedSensorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (UnimplementedSensorServiceServer) StreamData(SensorService_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedSensorServiceServer) mustEmbedUnimplementedSensorServiceServer() {}

// UnsafeSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServiceServer will
// result in compilation errors.
type UnsafeSensorServiceServer interface {
	mustEmbedUnimplementedSensorServiceServer()
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorServiceServer).StreamData(&sensorServiceStreamDataServer{stream})
}

type SensorService_StreamDataServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SensorEvent, error)
	grpc.ServerStream
}

type sensorServiceStreamDataServer struct {
	grpc.ServerStream
}

func (x *sensorServiceStreamDataServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sensorServiceStreamDataServer) Recv() (*SensorEvent, error) {
	m := new(SensorEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _SensorService_StreamData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/sensor_events.proto",
}
